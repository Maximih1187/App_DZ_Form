{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const sendingfetchForm = createAsyncThunk(\"formRegisterSlice/fetchForm\", async (regObj, {\n  dispatch\n}) => {\n  const response = await fetch(\"http://localhost:3001/users\", {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(regObj)\n  });\n  //const data = await response.json();\n  // dispatch(onRegistrSubmitForm(data));\n});\nexport const fetchDbFilter = createAsyncThunk(\"formRegisterSlice/fetchDbFilter\", async (_, {\n  dispatch\n}) => {\n  const response = await fetch('http://localhost:3001/users');\n  // if (!response.ok) {\n  //       throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n  // }\n  const data = await response.json();\n  dispatch(onRegistrSubmitForm(data));\n});\nconst initialState = {\n  stateSending: \"\",\n  registerObj: [],\n  stateAuthorization: [false, _]\n};\nconst formRegisterSlice = createSlice({\n  name: \"formRegisterSlice\",\n  initialState,\n  reducers: {\n    onRegistrSubmitForm: (state, action) => {\n      state.registerObj = action.payload.map(item => {\n        return item.login + item.password;\n      });\n    },\n    onToggleAuthorization: (state, action) => {\n      state.stateAuthorization = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(sendingfetchForm.fulfilled, state => {\n      state.stateSending = 'fulfilled';\n    });\n  }\n});\nconst {\n  reducer,\n  actions\n} = formRegisterSlice;\nexport default reducer;\nexport const {\n  onRegistrSubmitForm,\n  onToggleAuthorization\n} = actions;","map":{"version":3,"names":["createSlice","createAsyncThunk","sendingfetchForm","regObj","dispatch","response","fetch","method","headers","body","JSON","stringify","fetchDbFilter","_","data","json","onRegistrSubmitForm","initialState","stateSending","registerObj","stateAuthorization","formRegisterSlice","name","reducers","state","action","payload","map","item","login","password","onToggleAuthorization","extraReducers","builder","addCase","fulfilled","reducer","actions"],"sources":["/Users/maximih1108/Desktop/Проект/App_DZ_Form/src/components/pages/slicePages/formRegisterSlice.jsx"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nexport const sendingfetchForm = createAsyncThunk(\n      \"formRegisterSlice/fetchForm\",\n      async (regObj, { dispatch }) => {\n            const response = await fetch(\"http://localhost:3001/users\", {\n                  method: 'POST',\n                  headers: {\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify(regObj)\n            })\n            //const data = await response.json();\n            // dispatch(onRegistrSubmitForm(data));\n      }\n)\n\nexport const fetchDbFilter = createAsyncThunk(\n      \"formRegisterSlice/fetchDbFilter\",\n      async (_, { dispatch }) => {\n\n            const response = await fetch('http://localhost:3001/users')\n            // if (!response.ok) {\n            //       throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            // }\n            const data = await response.json()\n\n\n            dispatch(onRegistrSubmitForm(data))\n\n\n      }\n)\n\nconst initialState = {\n      stateSending: \"\",\n      registerObj: [],\n      stateAuthorization: [false, _],\n}\n\nconst formRegisterSlice = createSlice({\n      name: \"formRegisterSlice\",\n      initialState,\n      reducers: {\n            onRegistrSubmitForm: (state, action) => {\n                  state.registerObj = action.payload.map((item) => {\n                        return item.login + item.password\n                  })\n            },\n            onToggleAuthorization: (state, action) => {\n                  state.stateAuthorization = action.payload\n\n            },\n\n      },\n      extraReducers: (builder) => {\n            builder\n                  .addCase(sendingfetchForm.fulfilled, (state) => {\n                        state.stateSending = 'fulfilled'\n                  })\n\n      }\n})\n\n\nconst { reducer, actions } = formRegisterSlice;\n\nexport default reducer;\nexport const { onRegistrSubmitForm, onToggleAuthorization } = actions;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,OAAO,MAAMC,gBAAgB,GAAGD,gBAAgB,CAC1C,6BAA6B,EAC7B,OAAOE,MAAM,EAAE;EAAEC;AAAS,CAAC,KAAK;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;IACtDC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACH,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE;IACtB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,MAAM;EACjC,CAAC,CAAC;EACF;EACA;AACN,CACN,CAAC;AAED,OAAO,MAAMS,aAAa,GAAGX,gBAAgB,CACvC,iCAAiC,EACjC,OAAOY,CAAC,EAAE;EAAET;AAAS,CAAC,KAAK;EAErB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC;EAC3D;EACA;EACA;EACA,MAAMQ,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;EAGlCX,QAAQ,CAACY,mBAAmB,CAACF,IAAI,CAAC,CAAC;AAGzC,CACN,CAAC;AAED,MAAMG,YAAY,GAAG;EACfC,YAAY,EAAE,EAAE;EAChBC,WAAW,EAAE,EAAE;EACfC,kBAAkB,EAAE,CAAC,KAAK,EAAEP,CAAC;AACnC,CAAC;AAED,MAAMQ,iBAAiB,GAAGrB,WAAW,CAAC;EAChCsB,IAAI,EAAE,mBAAmB;EACzBL,YAAY;EACZM,QAAQ,EAAE;IACJP,mBAAmB,EAAEA,CAACQ,KAAK,EAAEC,MAAM,KAAK;MAClCD,KAAK,CAACL,WAAW,GAAGM,MAAM,CAACC,OAAO,CAACC,GAAG,CAAEC,IAAI,IAAK;QAC3C,OAAOA,IAAI,CAACC,KAAK,GAAGD,IAAI,CAACE,QAAQ;MACvC,CAAC,CAAC;IACR,CAAC;IACDC,qBAAqB,EAAEA,CAACP,KAAK,EAAEC,MAAM,KAAK;MACpCD,KAAK,CAACJ,kBAAkB,GAAGK,MAAM,CAACC,OAAO;IAE/C;EAEN,CAAC;EACDM,aAAa,EAAGC,OAAO,IAAK;IACtBA,OAAO,CACAC,OAAO,CAAChC,gBAAgB,CAACiC,SAAS,EAAGX,KAAK,IAAK;MAC1CA,KAAK,CAACN,YAAY,GAAG,WAAW;IACtC,CAAC,CAAC;EAEd;AACN,CAAC,CAAC;AAGF,MAAM;EAAEkB,OAAO;EAAEC;AAAQ,CAAC,GAAGhB,iBAAiB;AAE9C,eAAee,OAAO;AACtB,OAAO,MAAM;EAAEpB,mBAAmB;EAAEe;AAAsB,CAAC,GAAGM,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}