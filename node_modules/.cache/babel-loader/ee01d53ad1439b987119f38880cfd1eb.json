{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n// const _apiKey = \"4ca4e0f7a1c0e3bdc1240a5027d68f5f\";\n// const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n\nexport const fetchChars = createAsyncThunk('aboutSlice/fetchChars', async function (url, rejectWithValue) {\n  try {\n    const response = await fetch(url);\n    console.log(response);\n    if (!response.ok) {\n      throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n    }\n    const data = await response.json().then(res => res.data.results);\n    return data;\n  } catch (error) {\n    throw rejectWithValue(error.massage);\n  }\n});\nexport const fetchChar = createAsyncThunk('aboutSlice/fetchChar', async function (id, rejectWithValue) {\n  try {\n    const response = await fetch(`https://gateway.marvel.com:443/v1/public/characters/${id}?apikey=4ca4e0f7a1c0e3bdc1240a5027d68f5f`);\n    if (!response.ok) {\n      throw new Error(`Could not fetch ${id}, status: ${response.status}`);\n    }\n    const data = await response.json().then(res => res.data.results);\n    return data;\n  } catch (error) {\n    throw rejectWithValue(error.massage);\n  }\n});\nexport const setStateDisable = createAsyncThunk(\"aboutSlice/toggleStateDisable\", async id => {\n  const response = await fetch(`http://localhost:3001/stateDisable`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      id: id,\n      description: false\n    })\n  });\n});\nexport const toggleStateDisable = createAsyncThunk(\"aboutSlice/toggleStateDisable\", async id => {\n  const response = await fetch(`http://localhost:3001/stateDisable/${id}`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      id: id,\n      counter: 1,\n      description: false\n    })\n  });\n  //const data = await response.json();\n  // dispatch(onRegistrSubmitForm(data));\n});\n\n// export const fetchShoppingCart = createAsyncThunk(\n//       'aboutSlice/fetchShoppingCart',\n//       async function (id) {\n\n//             const response = await fetch(`https://gateway.marvel.com:443/v1/public/characters/${id}?apikey=4ca4e0f7a1c0e3bdc1240a5027d68f5f`)\n\n//             if (!response.ok) {\n//                   throw new Error(`Could not fetch ${id}, status: ${response.status}`);\n//             }\n//             const data = await response.json()\n//                   .then(res => res.data.results)\n\n//             return data;\n\n//       }\n// )\n\n//.thumbnail.path + \".\" + res.data.results[0].thumbnail.extension\nconst serviceChars = chars => chars.map(char => {\n  return {\n    id: char.id,\n    name: char.name,\n    description: char.description,\n    thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension\n    // homepage: char.urls[0].url,\n    // wiki: char.urls[1].url,\n    // comics: char.comics.items,\n  };\n});\nconst initialState = {\n  chars: [],\n  char: [],\n  status: '',\n  statusChar: '',\n  error: null,\n  idDescr: '',\n  shoppingCart: [],\n  stateDisable: [{\n    id: '',\n    counter: 1,\n    description: false\n  }]\n};\nconst aboutSlice = createSlice({\n  name: 'aboutSlice',\n  initialState,\n  reducers: {\n    getIdDescription: (state, action) => {\n      state.idDescr = [...state.idDescr, action.payload];\n    },\n    getDescriptions: (state, action) => {\n      state.char = action.payload;\n    },\n    getShoppingCart: (state, action) => {\n      state.shoppingCart = [...state.shoppingCart, action.payload];\n    },\n    deleteShoppingCart: (state, action) => {\n      console.log(action.payload);\n      state.shoppingCart = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchChars.pending, state => {\n      state.status = \"Loading\";\n    }).addCase(fetchChars.fulfilled, (state, action) => {\n      state.status = \"fulfilled\";\n      state.chars = serviceChars(action.payload);\n    }).addCase(fetchChars.rejected, (state, action) => {\n      state.status = 'Error';\n      state.error = action.payload;\n    }).addCase(fetchChar.pending, state => {\n      state.statusChar = \"Loading\";\n    }).addCase(fetchChar.fulfilled, (state, action) => {\n      state.statusChar = \"fulfilled\";\n      state.char = serviceChars(action.payload);\n    }).addCase(fetchChar.rejected, (state, action) => {\n      state.statusChar = 'Error';\n      state.error = action.payload;\n    });\n    // .addCase(fetchShoppingCart.fulfilled, (state, action) => {\n    //       state.statusChar = \"fulfilled\";\n    //       //state.shoppingCart.push(serviceChars(action.payload))\n    // })\n  }\n});\nconst {\n  actions,\n  reducer\n} = aboutSlice;\nexport default reducer;\nexport const {\n  getIdDescription,\n  getDescriptions,\n  getShoppingCart,\n  deleteShoppingCart\n} = actions;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchChars","url","rejectWithValue","response","fetch","console","log","ok","Error","status","data","json","then","res","results","error","massage","fetchChar","id","setStateDisable","method","headers","body","JSON","stringify","description","toggleStateDisable","counter","serviceChars","chars","map","char","name","thumbnail","path","extension","initialState","statusChar","idDescr","shoppingCart","stateDisable","aboutSlice","reducers","getIdDescription","state","action","payload","getDescriptions","getShoppingCart","deleteShoppingCart","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer"],"sources":["/Users/maximih1108/Desktop/Проект/App_DZ_Form/src/components/pages/slicePages/aboutSlice.jsx"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n// const _apiKey = \"4ca4e0f7a1c0e3bdc1240a5027d68f5f\";\n// const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n\nexport const fetchChars = createAsyncThunk(\n      'aboutSlice/fetchChars',\n\n      async function (url, rejectWithValue) {\n\n            try {\n                  const response = await fetch(url)\n                  console.log(response);\n                  if (!response.ok) {\n                        throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n                  }\n                  const data = await response.json()\n                        .then(res => res.data.results)\n\n                  return data;\n            } catch (error) {\n                  throw (rejectWithValue(error.massage))\n            }\n      }\n);\n\nexport const fetchChar = createAsyncThunk(\n      'aboutSlice/fetchChar',\n      async function (id, rejectWithValue) {\n            try {\n                  const response = await fetch(`https://gateway.marvel.com:443/v1/public/characters/${id}?apikey=4ca4e0f7a1c0e3bdc1240a5027d68f5f`)\n\n                  if (!response.ok) {\n                        throw new Error(`Could not fetch ${id}, status: ${response.status}`);\n                  }\n                  const data = await response.json()\n                        .then(res => res.data.results)\n\n                  return data;\n            } catch (error) {\n                  throw (rejectWithValue(error.massage))\n            }\n      }\n)\n\n\nexport const setStateDisable = createAsyncThunk(\n      \"aboutSlice/toggleStateDisable\",\n      async (id) => {\n            const response = await fetch(`http://localhost:3001/stateDisable`, {\n                  method: 'POST',\n                  headers: {\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({\n                        id: id,\n                        description: false,\n\n                  })\n            })\n\n      }\n)\nexport const toggleStateDisable = createAsyncThunk(\n      \"aboutSlice/toggleStateDisable\",\n      async (id) => {\n            const response = await fetch(`http://localhost:3001/stateDisable/${id}`, {\n                  method: 'POST',\n                  headers: {\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({\n                        id: id,\n                        counter: 1,\n                        description: false,\n\n\n                  })\n            })\n            //const data = await response.json();\n            // dispatch(onRegistrSubmitForm(data));\n      }\n)\n\n\n\n// export const fetchShoppingCart = createAsyncThunk(\n//       'aboutSlice/fetchShoppingCart',\n//       async function (id) {\n\n//             const response = await fetch(`https://gateway.marvel.com:443/v1/public/characters/${id}?apikey=4ca4e0f7a1c0e3bdc1240a5027d68f5f`)\n\n//             if (!response.ok) {\n//                   throw new Error(`Could not fetch ${id}, status: ${response.status}`);\n//             }\n//             const data = await response.json()\n//                   .then(res => res.data.results)\n\n//             return data;\n\n//       }\n// )\n\n\n\n\n\n\n//.thumbnail.path + \".\" + res.data.results[0].thumbnail.extension\nconst serviceChars = (chars) => chars.map(char => {\n\n      return {\n            id: char.id,\n            name: char.name,\n            description: char.description,\n            thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n            // homepage: char.urls[0].url,\n            // wiki: char.urls[1].url,\n            // comics: char.comics.items,\n\n      };\n})\n\n\nconst initialState = {\n      chars: [],\n      char: [],\n      status: '',\n      statusChar: '',\n      error: null,\n      idDescr: '',\n      shoppingCart: [],\n      stateDisable: [{\n            id: '',\n            counter: 1,\n            description: false,\n      }]\n}\n\nconst aboutSlice = createSlice({\n      name: 'aboutSlice',\n      initialState,\n      reducers: {\n            getIdDescription: (state, action) => {\n                  state.idDescr = [...state.idDescr, action.payload]\n\n\n            },\n            getDescriptions: (state, action) => {\n                  state.char = action.payload\n\n            },\n            getShoppingCart: (state, action) => {\n                  state.shoppingCart = [...state.shoppingCart, action.payload]\n\n            },\n            deleteShoppingCart: (state, action) => {\n                  console.log(action.payload);\n                  state.shoppingCart = action.payload\n\n            },\n      },\n      extraReducers: (builder) => {\n            builder\n                  .addCase(fetchChars.pending, (state) => {\n                        state.status = \"Loading\"\n                  })\n                  .addCase(fetchChars.fulfilled, (state, action) => {\n                        state.status = \"fulfilled\";\n                        state.chars = serviceChars(action.payload)\n                  })\n                  .addCase(fetchChars.rejected, (state, action) => {\n                        state.status = 'Error';\n                        state.error = action.payload\n                  })\n                  .addCase(fetchChar.pending, (state) => {\n                        state.statusChar = \"Loading\"\n                  })\n                  .addCase(fetchChar.fulfilled, (state, action) => {\n                        state.statusChar = \"fulfilled\";\n                        state.char = serviceChars(action.payload)\n                  })\n                  .addCase(fetchChar.rejected, (state, action) => {\n                        state.statusChar = 'Error';\n                        state.error = action.payload\n                  })\n            // .addCase(fetchShoppingCart.fulfilled, (state, action) => {\n            //       state.statusChar = \"fulfilled\";\n            //       //state.shoppingCart.push(serviceChars(action.payload))\n            // })\n      }\n\n})\n\nconst { actions, reducer } = aboutSlice;\nexport default reducer;\nexport const { getIdDescription, getDescriptions, getShoppingCart, deleteShoppingCart } = actions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}