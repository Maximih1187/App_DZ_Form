{"ast":null,"code":"import * as Yup from 'yup';\n\n// const regx = {\n//       email: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/,\n//       // i.test(values.email)\n// }\n\nexport const schemas = {\n  custom: Yup.object().shape({\n    name: Yup.string().min(6, 'не менее 6 цифр').max(10, 'не более 10 цифр').required('Не может быть пустым'),\n    email: Yup.string().email('Не правильный формат email адреса').required('Не может быть пустым'),\n    password: Yup.string().min(6, 'не менее 6 цифр').max(10, 'не более 10 цифр').required('Не может быть пустым')\n  })\n};\n// const email = Yup.string()\n//       .matches(regx.email, 'Не правильный формат email адреса')\n//       .required('Не может быть пустым')\n// const password = Yup.number()\n//       .min(6, 'не менее 6 цифр')\n//       .max(12, 'не более 12 цифр')\n//       .matches(regx.password, 'Не правильный формат пароля')\n//       .required('Не может быть пустым')\n\nexport const initialValues = {\n  name: \"\",\n  email: \"\",\n  password: \"\"\n};","map":{"version":3,"names":["Yup","schemas","custom","object","shape","name","string","min","max","required","email","password","initialValues"],"sources":["/Users/maximih1108/Desktop/Проект/App_DZ_Form/src/components/forms/helper.js"],"sourcesContent":["import * as Yup from 'yup';\n\n// const regx = {\n//       email: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/,\n//       // i.test(values.email)\n// }\n\nexport const schemas = {\n      custom: Yup.object().shape({\n            name: Yup.string()\n                  .min(6, 'не менее 6 цифр')\n                  .max(10, 'не более 10 цифр')\n                  .required('Не может быть пустым'),\n            email: Yup.string()\n                  .email('Не правильный формат email адреса')\n                  .required('Не может быть пустым'),\n            password: Yup.string()\n                  .min(6, 'не менее 6 цифр')\n                  .max(10, 'не более 10 цифр')\n                  .required('Не может быть пустым')\n      })\n}\n// const email = Yup.string()\n//       .matches(regx.email, 'Не правильный формат email адреса')\n//       .required('Не может быть пустым')\n// const password = Yup.number()\n//       .min(6, 'не менее 6 цифр')\n//       .max(12, 'не более 12 цифр')\n//       .matches(regx.password, 'Не правильный формат пароля')\n//       .required('Не может быть пустым')\n\n\nexport const initialValues = {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n}\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,KAAK;;AAE1B;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,OAAO,GAAG;EACjBC,MAAM,EAAEF,GAAG,CAACG,MAAM,CAAC,CAAC,CAACC,KAAK,CAAC;IACrBC,IAAI,EAAEL,GAAG,CAACM,MAAM,CAAC,CAAC,CACXC,GAAG,CAAC,CAAC,EAAE,iBAAiB,CAAC,CACzBC,GAAG,CAAC,EAAE,EAAE,kBAAkB,CAAC,CAC3BC,QAAQ,CAAC,sBAAsB,CAAC;IACvCC,KAAK,EAAEV,GAAG,CAACM,MAAM,CAAC,CAAC,CACZI,KAAK,CAAC,mCAAmC,CAAC,CAC1CD,QAAQ,CAAC,sBAAsB,CAAC;IACvCE,QAAQ,EAAEX,GAAG,CAACM,MAAM,CAAC,CAAC,CACfC,GAAG,CAAC,CAAC,EAAE,iBAAiB,CAAC,CACzBC,GAAG,CAAC,EAAE,EAAE,kBAAkB,CAAC,CAC3BC,QAAQ,CAAC,sBAAsB;EAC5C,CAAC;AACP,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,MAAMG,aAAa,GAAG;EACvBP,IAAI,EAAE,EAAE;EACRK,KAAK,EAAE,EAAE;EACTC,QAAQ,EAAE;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}