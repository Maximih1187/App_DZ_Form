{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nexport const fetchChar = createAsyncThunk('aboutSlice/fetchChar', async function (_, rejectWithValue) {\n  try {\n    const response = await fetch(\"https://gateway.marvel.com:443/v1/public/characters?apikey=4ca4e0f7a1c0e3bdc1240a5027d68f5f\");\n    if (!response.ok) {\n      throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n    }\n    const data = await response.json();\n    const res = char.char.data.results.map(_transformCharacter);\n    console.log(res);\n    const _transformCharacter = char => {\n      return {\n        id: char.id,\n        name: char.name,\n        description: char.description\n        // thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n        // homepage: char.urls[0].url,\n        // wiki: char.urls[1].url,\n        // comics: char.comics.items,\n      };\n    };\n    //return data;\n  } catch (error) {\n    throw rejectWithValue(error.massage);\n  }\n});\nconst initialState = {\n  char: [],\n  status: '',\n  error: null\n};\nconst aboutSlice = createSlice({\n  name: 'aboutSlice',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchChar.pending, state => {\n      state.status = \"Loading\";\n    }).addCase(fetchChar.fulfilled, (state, action) => {\n      state.status = \"fulfilled\";\n      state.char = action.payload;\n    }).addCase(fetchChar.rejected, (state, action) => {\n      state.status = 'Error';\n      state.error = action.payload;\n    });\n  }\n});\nconst {\n  actions,\n  reducer\n} = aboutSlice;\nexport default reducer;\nexport const {} = actions;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchChar","_","rejectWithValue","response","fetch","ok","Error","url","status","data","json","res","char","results","map","_transformCharacter","console","log","id","name","description","error","massage","initialState","aboutSlice","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","actions","reducer"],"sources":["/Users/maximih1108/Desktop/Проект/App_DZ_Form/src/components/pages/slicePages/aboutSlice.jsx"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\nexport const fetchChar = createAsyncThunk(\n      'aboutSlice/fetchChar',\n\n      async function (_, rejectWithValue) {\n            try {\n                  const response = await fetch(\"https://gateway.marvel.com:443/v1/public/characters?apikey=4ca4e0f7a1c0e3bdc1240a5027d68f5f\")\n\n                  if (!response.ok) {\n                        throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n                  }\n                  const data = await response.json()\n                  const res = char.char.data.results.map(_transformCharacter)\n                  console.log(res);\n                  const _transformCharacter = (char) => {\n                        return {\n                              id: char.id,\n                              name: char.name,\n                              description: char.description,\n                              // thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n                              // homepage: char.urls[0].url,\n                              // wiki: char.urls[1].url,\n                              // comics: char.comics.items,\n                        };\n                  };\n                  //return data;\n\n            } catch (error) {\n                  throw (rejectWithValue(error.massage))\n            }\n      }\n)\n\n\nconst initialState = {\n      char: [],\n      status: '',\n      error: null,\n}\n\nconst aboutSlice = createSlice({\n      name: 'aboutSlice',\n      initialState,\n      reducers: {},\n      extraReducers: (builder) => {\n            builder\n                  .addCase(fetchChar.pending, (state) => {\n                        state.status = \"Loading\"\n                  })\n                  .addCase(fetchChar.fulfilled, (state, action) => {\n                        state.status = \"fulfilled\";\n                        state.char = action.payload\n                  })\n                  .addCase(fetchChar.rejected, (state, action) => {\n                        state.status = 'Error';\n                        state.error = action.payload;\n                  })\n      }\n})\n\nconst { actions, reducer } = aboutSlice;\nexport default reducer;\nexport const { } = actions;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAEhE,OAAO,MAAMC,SAAS,GAAGF,gBAAgB,CACnC,sBAAsB,EAEtB,gBAAgBG,CAAC,EAAEC,eAAe,EAAE;EAC9B,IAAI;IACE,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6FAA6F,CAAC;IAE3H,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MACZ,MAAM,IAAIC,KAAK,CAAE,mBAAkBC,GAAI,aAAYJ,QAAQ,CAACK,MAAO,EAAC,CAAC;IAC3E;IACA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAClC,MAAMC,GAAG,GAAGC,IAAI,CAACA,IAAI,CAACH,IAAI,CAACI,OAAO,CAACC,GAAG,CAACC,mBAAmB,CAAC;IAC3DC,OAAO,CAACC,GAAG,CAACN,GAAG,CAAC;IAChB,MAAMI,mBAAmB,GAAIH,IAAI,IAAK;MAChC,OAAO;QACDM,EAAE,EAAEN,IAAI,CAACM,EAAE;QACXC,IAAI,EAAEP,IAAI,CAACO,IAAI;QACfC,WAAW,EAAER,IAAI,CAACQ;QAClB;QACA;QACA;QACA;MACN,CAAC;IACP,CAAC;IACD;EAEN,CAAC,CAAC,OAAOC,KAAK,EAAE;IACV,MAAOnB,eAAe,CAACmB,KAAK,CAACC,OAAO,CAAC;EAC3C;AACN,CACN,CAAC;AAGD,MAAMC,YAAY,GAAG;EACfX,IAAI,EAAE,EAAE;EACRJ,MAAM,EAAE,EAAE;EACVa,KAAK,EAAE;AACb,CAAC;AAED,MAAMG,UAAU,GAAGzB,WAAW,CAAC;EACzBoB,IAAI,EAAE,YAAY;EAClBI,YAAY;EACZE,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IACtBA,OAAO,CACAC,OAAO,CAAC5B,SAAS,CAAC6B,OAAO,EAAGC,KAAK,IAAK;MACjCA,KAAK,CAACtB,MAAM,GAAG,SAAS;IAC9B,CAAC,CAAC,CACDoB,OAAO,CAAC5B,SAAS,CAAC+B,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC3CF,KAAK,CAACtB,MAAM,GAAG,WAAW;MAC1BsB,KAAK,CAAClB,IAAI,GAAGoB,MAAM,CAACC,OAAO;IACjC,CAAC,CAAC,CACDL,OAAO,CAAC5B,SAAS,CAACkC,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC1CF,KAAK,CAACtB,MAAM,GAAG,OAAO;MACtBsB,KAAK,CAACT,KAAK,GAAGW,MAAM,CAACC,OAAO;IAClC,CAAC,CAAC;EACd;AACN,CAAC,CAAC;AAEF,MAAM;EAAEE,OAAO;EAAEC;AAAQ,CAAC,GAAGZ,UAAU;AACvC,eAAeY,OAAO;AACtB,OAAO,MAAM,CAAE,CAAC,GAAGD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}