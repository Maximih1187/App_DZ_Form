{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const sendingfetchForm = createAsyncThunk(\"formRegisterSlice/fetchForm\", async (regObj, {\n  dispatch\n}) => {\n  const response = await fetch(\"http://localhost:3001/users\", {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(regObj)\n  });\n  const data = await response.json();\n  dispatch(onRegistrSubmitForm(data));\n});\nexport const fetchDbFilter = createAsyncThunk(\"formRegisterSlice/fetchDbFilter\", async (_, {\n  dispatch\n}) => {\n  try {\n    const response = await fetch('http://localhost:3001/users');\n    if (!response.ok) {\n      throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n    }\n    const data = await response.json().then(res => res.data.results[0].thumbnail.path + \".\" + res.data.results[0].thumbnail.extension);\n    return data;\n  } catch (error) {\n    throw rejectWithValue(error.massage);\n  }\n});\nconst initialState = {\n  stateSending: \"\",\n  registerObj: []\n};\nconst formRegisterSlice = createSlice({\n  name: \"formRegisterSlice\",\n  initialState,\n  reducers: {\n    onRegistrSubmitForm: (state, action) => {\n      state.registerObj.push(action.payload);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(sendingfetchForm.fulfilled, state => {\n      state.stateSending = 'fulfilled';\n    });\n  }\n});\nconst {\n  reducer,\n  actions\n} = formRegisterSlice;\nexport default reducer;\nexport const {\n  onRegistrSubmitForm\n} = actions;","map":{"version":3,"names":["createSlice","createAsyncThunk","sendingfetchForm","regObj","dispatch","response","fetch","method","headers","body","JSON","stringify","data","json","onRegistrSubmitForm","fetchDbFilter","_","ok","Error","url","status","then","res","results","thumbnail","path","extension","error","rejectWithValue","massage","initialState","stateSending","registerObj","formRegisterSlice","name","reducers","state","action","push","payload","extraReducers","builder","addCase","fulfilled","reducer","actions"],"sources":["/Users/maximih1108/Desktop/Проект/App_DZ_Form/src/components/pages/slicePages/formRegisterSlice.jsx"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nexport const sendingfetchForm = createAsyncThunk(\n      \"formRegisterSlice/fetchForm\",\n      async (regObj, { dispatch }) => {\n            const response = await fetch(\"http://localhost:3001/users\", {\n                  method: 'POST',\n                  headers: {\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify(regObj)\n            })\n            const data = await response.json();\n            dispatch(onRegistrSubmitForm(data));\n      }\n)\nexport const fetchDbFilter = createAsyncThunk(\n      \"formRegisterSlice/fetchDbFilter\",\n      async (_, { dispatch }) => {\n            try {\n                  const response = await fetch('http://localhost:3001/users')\n\n                  if (!response.ok) {\n                        throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n                  }\n                  const data = await response.json()\n                        .then(res => res.data.results[0].thumbnail.path + \".\" + res.data.results[0].thumbnail.extension)\n\n                  return data;\n            } catch (error) {\n                  throw (rejectWithValue(error.massage))\n            }\n\n      }\n)\n\nconst initialState = {\n\n      stateSending: \"\",\n      registerObj: [],\n}\n\nconst formRegisterSlice = createSlice({\n      name: \"formRegisterSlice\",\n      initialState,\n      reducers: {\n            onRegistrSubmitForm: (state, action) => {\n                  state.registerObj.push(action.payload)\n            },\n\n      },\n      extraReducers: (builder) => {\n            builder\n                  .addCase(sendingfetchForm.fulfilled, (state) => {\n                        state.stateSending = 'fulfilled'\n\n\n                  })\n      }\n})\n\n\nconst { reducer, actions } = formRegisterSlice;\n\nexport default reducer;\nexport const { onRegistrSubmitForm } = actions;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,OAAO,MAAMC,gBAAgB,GAAGD,gBAAgB,CAC1C,6BAA6B,EAC7B,OAAOE,MAAM,EAAE;EAAEC;AAAS,CAAC,KAAK;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;IACtDC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACH,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE;IACtB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,MAAM;EACjC,CAAC,CAAC;EACF,MAAMS,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAClCT,QAAQ,CAACU,mBAAmB,CAACF,IAAI,CAAC,CAAC;AACzC,CACN,CAAC;AACD,OAAO,MAAMG,aAAa,GAAGd,gBAAgB,CACvC,iCAAiC,EACjC,OAAOe,CAAC,EAAE;EAAEZ;AAAS,CAAC,KAAK;EACrB,IAAI;IACE,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC;IAE3D,IAAI,CAACD,QAAQ,CAACY,EAAE,EAAE;MACZ,MAAM,IAAIC,KAAK,CAAE,mBAAkBC,GAAI,aAAYd,QAAQ,CAACe,MAAO,EAAC,CAAC;IAC3E;IACA,MAAMR,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAC3BQ,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACV,IAAI,CAACW,OAAO,CAAC,CAAC,CAAC,CAACC,SAAS,CAACC,IAAI,GAAG,GAAG,GAAGH,GAAG,CAACV,IAAI,CAACW,OAAO,CAAC,CAAC,CAAC,CAACC,SAAS,CAACE,SAAS,CAAC;IAEtG,OAAOd,IAAI;EACjB,CAAC,CAAC,OAAOe,KAAK,EAAE;IACV,MAAOC,eAAe,CAACD,KAAK,CAACE,OAAO,CAAC;EAC3C;AAEN,CACN,CAAC;AAED,MAAMC,YAAY,GAAG;EAEfC,YAAY,EAAE,EAAE;EAChBC,WAAW,EAAE;AACnB,CAAC;AAED,MAAMC,iBAAiB,GAAGjC,WAAW,CAAC;EAChCkC,IAAI,EAAE,mBAAmB;EACzBJ,YAAY;EACZK,QAAQ,EAAE;IACJrB,mBAAmB,EAAEA,CAACsB,KAAK,EAAEC,MAAM,KAAK;MAClCD,KAAK,CAACJ,WAAW,CAACM,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;IAC5C;EAEN,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IACtBA,OAAO,CACAC,OAAO,CAACxC,gBAAgB,CAACyC,SAAS,EAAGP,KAAK,IAAK;MAC1CA,KAAK,CAACL,YAAY,GAAG,WAAW;IAGtC,CAAC,CAAC;EACd;AACN,CAAC,CAAC;AAGF,MAAM;EAAEa,OAAO;EAAEC;AAAQ,CAAC,GAAGZ,iBAAiB;AAE9C,eAAeW,OAAO;AACtB,OAAO,MAAM;EAAE9B;AAAoB,CAAC,GAAG+B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}