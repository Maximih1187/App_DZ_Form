{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const sendingfetchForm = createAsyncThunk(\"formRegisterSlice/fetchForm\", async (regObj, {\n  dispatch\n}) => {\n  const response = await fetch(\"http://localhost:3001/users\", {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(regObj)\n  });\n  //const data = await response.json();\n  // dispatch(onRegistrSubmitForm(data));\n});\nexport const fetchDbFilter = createAsyncThunk(\"formRegisterSlice/fetchDbFilter\", async (_, {\n  dispatch\n}) => {\n  const response = await fetch('http://localhost:3001/users');\n  // if (!response.ok) {\n  //       throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n  // }\n  const data = await response.json();\n  const result = () => {\n    data.forEach(item => {\n      return item.login;\n    });\n  };\n  console.log(result());\n  //dispatch(onRegistrSubmitForm(data))\n});\nconst initialState = {\n  stateSending: \"\",\n  registerObj: []\n};\nconst formRegisterSlice = createSlice({\n  name: \"formRegisterSlice\",\n  initialState,\n  reducers: {\n    onRegistrSubmitForm: (state, action) => {\n      state.registerObj = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(sendingfetchForm.fulfilled, state => {\n      state.stateSending = 'fulfilled';\n    });\n  }\n});\nconst {\n  reducer,\n  actions\n} = formRegisterSlice;\nexport default reducer;\nexport const {\n  onRegistrSubmitForm\n} = actions;","map":{"version":3,"names":["createSlice","createAsyncThunk","sendingfetchForm","regObj","dispatch","response","fetch","method","headers","body","JSON","stringify","fetchDbFilter","_","data","json","result","forEach","item","login","console","log","initialState","stateSending","registerObj","formRegisterSlice","name","reducers","onRegistrSubmitForm","state","action","payload","extraReducers","builder","addCase","fulfilled","reducer","actions"],"sources":["/Users/maximih1108/Desktop/Проект/App_DZ_Form/src/components/pages/slicePages/formRegisterSlice.jsx"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nexport const sendingfetchForm = createAsyncThunk(\n      \"formRegisterSlice/fetchForm\",\n      async (regObj, { dispatch }) => {\n            const response = await fetch(\"http://localhost:3001/users\", {\n                  method: 'POST',\n                  headers: {\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify(regObj)\n            })\n            //const data = await response.json();\n            // dispatch(onRegistrSubmitForm(data));\n      }\n)\n\nexport const fetchDbFilter = createAsyncThunk(\n      \"formRegisterSlice/fetchDbFilter\",\n      async (_, { dispatch }) => {\n\n            const response = await fetch('http://localhost:3001/users')\n            // if (!response.ok) {\n            //       throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            // }\n            const data = await response.json()\n\n            const result = () => {\n                  data.forEach((item) => {\n                        return item.login\n                  })\n            }\n\n            console.log(result());\n            //dispatch(onRegistrSubmitForm(data))\n\n\n      }\n)\n\nconst initialState = {\n\n      stateSending: \"\",\n      registerObj: [],\n}\n\nconst formRegisterSlice = createSlice({\n      name: \"formRegisterSlice\",\n      initialState,\n      reducers: {\n            onRegistrSubmitForm: (state, action) => {\n                  state.registerObj = action.payload\n            },\n\n      },\n      extraReducers: (builder) => {\n            builder\n                  .addCase(sendingfetchForm.fulfilled, (state) => {\n                        state.stateSending = 'fulfilled'\n\n\n                  })\n\n      }\n})\n\n\nconst { reducer, actions } = formRegisterSlice;\n\nexport default reducer;\nexport const { onRegistrSubmitForm } = actions;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,OAAO,MAAMC,gBAAgB,GAAGD,gBAAgB,CAC1C,6BAA6B,EAC7B,OAAOE,MAAM,EAAE;EAAEC;AAAS,CAAC,KAAK;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;IACtDC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACH,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE;IACtB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,MAAM;EACjC,CAAC,CAAC;EACF;EACA;AACN,CACN,CAAC;AAED,OAAO,MAAMS,aAAa,GAAGX,gBAAgB,CACvC,iCAAiC,EACjC,OAAOY,CAAC,EAAE;EAAET;AAAS,CAAC,KAAK;EAErB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC;EAC3D;EACA;EACA;EACA,MAAMQ,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;EAElC,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACfF,IAAI,CAACG,OAAO,CAAEC,IAAI,IAAK;MACjB,OAAOA,IAAI,CAACC,KAAK;IACvB,CAAC,CAAC;EACR,CAAC;EAEDC,OAAO,CAACC,GAAG,CAACL,MAAM,CAAC,CAAC,CAAC;EACrB;AAGN,CACN,CAAC;AAED,MAAMM,YAAY,GAAG;EAEfC,YAAY,EAAE,EAAE;EAChBC,WAAW,EAAE;AACnB,CAAC;AAED,MAAMC,iBAAiB,GAAGzB,WAAW,CAAC;EAChC0B,IAAI,EAAE,mBAAmB;EACzBJ,YAAY;EACZK,QAAQ,EAAE;IACJC,mBAAmB,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAClCD,KAAK,CAACL,WAAW,GAAGM,MAAM,CAACC,OAAO;IACxC;EAEN,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IACtBA,OAAO,CACAC,OAAO,CAAChC,gBAAgB,CAACiC,SAAS,EAAGN,KAAK,IAAK;MAC1CA,KAAK,CAACN,YAAY,GAAG,WAAW;IAGtC,CAAC,CAAC;EAEd;AACN,CAAC,CAAC;AAGF,MAAM;EAAEa,OAAO;EAAEC;AAAQ,CAAC,GAAGZ,iBAAiB;AAE9C,eAAeW,OAAO;AACtB,OAAO,MAAM;EAAER;AAAoB,CAAC,GAAGS,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}