{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const sendingfetchForm = createAsyncThunk(\"formRegisterSlice/fetchForm\", async (regObj, dispatch) => {\n  const response = await fetch(\"http://localhost:3001/users\", {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(regObj)\n  });\n  const data = await response.json();\n  dispatch(onRegistrSubmitForm(data));\n});\nconst initialState = {\n  stateSending: \"\",\n  registerObj: []\n};\nconst formRegisterSlice = createSlice({\n  name: \"formRegisterSlice\",\n  initialState,\n  reducers: {\n    onRegistrSubmitForm: (state, action) => {\n      state.registerObj.push(action.payload);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(sendingfetchForm.fulfilled, state => {\n      state.stateSending = 'fulfilled';\n    });\n  }\n});\nconst {\n  reducer,\n  actions\n} = formRegisterSlice;\nexport default reducer;\nexport const {\n  onRegistrSubmitForm\n} = actions;","map":{"version":3,"names":["createSlice","createAsyncThunk","sendingfetchForm","regObj","dispatch","response","fetch","method","headers","body","JSON","stringify","data","json","onRegistrSubmitForm","initialState","stateSending","registerObj","formRegisterSlice","name","reducers","state","action","push","payload","extraReducers","builder","addCase","fulfilled","reducer","actions"],"sources":["/Users/maximih1108/Desktop/Проект/App_DZ_Form/src/components/pages/slicePages/formRegisterSlice.jsx"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nexport const sendingfetchForm = createAsyncThunk(\n      \"formRegisterSlice/fetchForm\",\n      async (regObj, dispatch) => {\n\n            const response = await fetch(\"http://localhost:3001/users\", {\n                  method: 'POST',\n                  headers: {\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify(regObj)\n            })\n            const data = await response.json()\n\n\n            dispatch(onRegistrSubmitForm(data))\n\n\n\n\n      }\n)\n\nconst initialState = {\n\n      stateSending: \"\",\n      registerObj: [],\n}\n\nconst formRegisterSlice = createSlice({\n      name: \"formRegisterSlice\",\n      initialState,\n      reducers: {\n            onRegistrSubmitForm: (state, action) => {\n                  state.registerObj.push(action.payload)\n            },\n\n      },\n      extraReducers: (builder) => {\n            builder\n                  .addCase(sendingfetchForm.fulfilled, (state) => {\n                        state.stateSending = 'fulfilled'\n\n\n                  })\n      }\n})\n\n\nconst { reducer, actions } = formRegisterSlice;\n\nexport default reducer;\nexport const { onRegistrSubmitForm } = actions;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,OAAO,MAAMC,gBAAgB,GAAGD,gBAAgB,CAC1C,6BAA6B,EAC7B,OAAOE,MAAM,EAAEC,QAAQ,KAAK;EAEtB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;IACtDC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACH,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE;IACtB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,MAAM;EACjC,CAAC,CAAC;EACF,MAAMS,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAGlCT,QAAQ,CAACU,mBAAmB,CAACF,IAAI,CAAC,CAAC;AAKzC,CACN,CAAC;AAED,MAAMG,YAAY,GAAG;EAEfC,YAAY,EAAE,EAAE;EAChBC,WAAW,EAAE;AACnB,CAAC;AAED,MAAMC,iBAAiB,GAAGlB,WAAW,CAAC;EAChCmB,IAAI,EAAE,mBAAmB;EACzBJ,YAAY;EACZK,QAAQ,EAAE;IACJN,mBAAmB,EAAEA,CAACO,KAAK,EAAEC,MAAM,KAAK;MAClCD,KAAK,CAACJ,WAAW,CAACM,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;IAC5C;EAEN,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IACtBA,OAAO,CACAC,OAAO,CAACzB,gBAAgB,CAAC0B,SAAS,EAAGP,KAAK,IAAK;MAC1CA,KAAK,CAACL,YAAY,GAAG,WAAW;IAGtC,CAAC,CAAC;EACd;AACN,CAAC,CAAC;AAGF,MAAM;EAAEa,OAAO;EAAEC;AAAQ,CAAC,GAAGZ,iBAAiB;AAE9C,eAAeW,OAAO;AACtB,OAAO,MAAM;EAAEf;AAAoB,CAAC,GAAGgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}