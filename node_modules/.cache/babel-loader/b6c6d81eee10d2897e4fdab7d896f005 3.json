{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nexport const fetchChars = createAsyncThunk('aboutSlice/fetchChars', async function (url, rejectWithValue) {\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n    }\n    const data = await response.json().then(res => res.data.results);\n    return data;\n  } catch (error) {\n    throw rejectWithValue(error.massage);\n  }\n});\n// export const fetchChar = createAsyncThunk(\n//       'aboutSlice/fetchChar',\n\n//       async function (url, rejectWithValue) {\n\n//             try {\n//                   const response = await fetch(url)\n\n//                   if (!response.ok) {\n//                         throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n//                   }\n//                   const data = await response.json()\n//                         .then(res => res.data.results)\n//                   return data;\n//             } catch (error) {\n//                   throw (rejectWithValue(error.massage))\n//             }\n//       }\n// )\n\n// const _apiKey = \"4ca4e0f7a1c0e3bdc1240a5027d68f5f\";\n// const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n\nconst initialState = {\n  chars: [],\n  char: [],\n  status: '',\n  error: null,\n  idDescr: \"\"\n};\nconst aboutSlice = createSlice({\n  name: 'aboutSlice',\n  initialState,\n  reducers: {\n    getIdDescription: (state, action) => {\n      state.idDescr = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchChars.pending, state => {\n      state.status = \"Loading\";\n    }).addCase(fetchChars.fulfilled, (state, action) => {\n      state.status = \"fulfilled\";\n      state.chars = action.payload;\n    }).addCase(fetchChars.rejected, (state, action) => {\n      state.status = 'Error';\n      state.error = action.payload;\n    });\n  }\n  // extraReducers: (builder) => {\n  //       builder\n  //             .addCase(fetchChar.pending, (state) => {\n  //                   state.status = \"Loading\"\n  //             })\n  //             .addCase(fetchChar.fulfilled, (state, action) => {\n  //                   state.status = \"fulfilled\";\n  //                   state.char = action.payload\n  //             })\n  //             .addCase(fetchChar.rejected, (state, action) => {\n  //                   state.status = 'Error';\n  //                   state.error = action.payload\n  //             })\n  // }\n});\nconst {\n  actions,\n  reducer\n} = aboutSlice;\nexport default reducer;\nexport const {\n  getIdDescription\n} = actions;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchChars","url","rejectWithValue","response","fetch","ok","Error","status","data","json","then","res","results","error","massage","initialState","chars","char","idDescr","aboutSlice","name","reducers","getIdDescription","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer"],"sources":["/Users/maximih1108/Desktop/Проект/App_DZ_Form/src/components/pages/slicePages/aboutSlice.jsx"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\nexport const fetchChars = createAsyncThunk(\n      'aboutSlice/fetchChars',\n\n      async function (url, rejectWithValue) {\n\n\n            try {\n                  const response = await fetch(url)\n\n                  if (!response.ok) {\n                        throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n                  }\n                  const data = await response.json()\n                        .then(res => res.data.results)\n                  return data;\n            } catch (error) {\n                  throw (rejectWithValue(error.massage))\n            }\n      }\n)\n// export const fetchChar = createAsyncThunk(\n//       'aboutSlice/fetchChar',\n\n//       async function (url, rejectWithValue) {\n\n\n//             try {\n//                   const response = await fetch(url)\n\n//                   if (!response.ok) {\n//                         throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n//                   }\n//                   const data = await response.json()\n//                         .then(res => res.data.results)\n//                   return data;\n//             } catch (error) {\n//                   throw (rejectWithValue(error.massage))\n//             }\n//       }\n// )\n\n// const _apiKey = \"4ca4e0f7a1c0e3bdc1240a5027d68f5f\";\n// const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n\nconst initialState = {\n      chars: [],\n      char: [],\n      status: '',\n      error: null,\n      idDescr: \"\",\n}\n\nconst aboutSlice = createSlice({\n      name: 'aboutSlice',\n      initialState,\n      reducers: {\n            getIdDescription: (state, action) => {\n                  state.idDescr = action.payload;\n            }\n      },\n      extraReducers: (builder) => {\n            builder\n                  .addCase(fetchChars.pending, (state) => {\n                        state.status = \"Loading\"\n                  })\n                  .addCase(fetchChars.fulfilled, (state, action) => {\n                        state.status = \"fulfilled\";\n                        state.chars = action.payload\n                  })\n                  .addCase(fetchChars.rejected, (state, action) => {\n                        state.status = 'Error';\n                        state.error = action.payload\n                  })\n\n      },\n      // extraReducers: (builder) => {\n      //       builder\n      //             .addCase(fetchChar.pending, (state) => {\n      //                   state.status = \"Loading\"\n      //             })\n      //             .addCase(fetchChar.fulfilled, (state, action) => {\n      //                   state.status = \"fulfilled\";\n      //                   state.char = action.payload\n      //             })\n      //             .addCase(fetchChar.rejected, (state, action) => {\n      //                   state.status = 'Error';\n      //                   state.error = action.payload\n      //             })\n      // }\n})\n\nconst { actions, reducer } = aboutSlice;\nexport default reducer;\nexport const { getIdDescription } = actions;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAEhE,OAAO,MAAMC,UAAU,GAAGF,gBAAgB,CACpC,uBAAuB,EAEvB,gBAAgBG,GAAG,EAAEC,eAAe,EAAE;EAGhC,IAAI;IACE,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,CAAC;IAEjC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MACZ,MAAM,IAAIC,KAAK,CAAE,mBAAkBL,GAAI,aAAYE,QAAQ,CAACI,MAAO,EAAC,CAAC;IAC3E;IACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC,CAC3BC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACH,IAAI,CAACI,OAAO,CAAC;IACpC,OAAOJ,IAAI;EACjB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACV,MAAOX,eAAe,CAACW,KAAK,CAACC,OAAO,CAAC;EAC3C;AACN,CACN,CAAC;AACD;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,MAAMC,YAAY,GAAG;EACfC,KAAK,EAAE,EAAE;EACTC,IAAI,EAAE,EAAE;EACRV,MAAM,EAAE,EAAE;EACVM,KAAK,EAAE,IAAI;EACXK,OAAO,EAAE;AACf,CAAC;AAED,MAAMC,UAAU,GAAGpB,WAAW,CAAC;EACzBqB,IAAI,EAAE,YAAY;EAClBL,YAAY;EACZM,QAAQ,EAAE;IACJC,gBAAgB,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC/BD,KAAK,CAACL,OAAO,GAAGM,MAAM,CAACC,OAAO;IACpC;EACN,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IACtBA,OAAO,CACAC,OAAO,CAAC5B,UAAU,CAAC6B,OAAO,EAAGN,KAAK,IAAK;MAClCA,KAAK,CAAChB,MAAM,GAAG,SAAS;IAC9B,CAAC,CAAC,CACDqB,OAAO,CAAC5B,UAAU,CAAC8B,SAAS,EAAE,CAACP,KAAK,EAAEC,MAAM,KAAK;MAC5CD,KAAK,CAAChB,MAAM,GAAG,WAAW;MAC1BgB,KAAK,CAACP,KAAK,GAAGQ,MAAM,CAACC,OAAO;IAClC,CAAC,CAAC,CACDG,OAAO,CAAC5B,UAAU,CAAC+B,QAAQ,EAAE,CAACR,KAAK,EAAEC,MAAM,KAAK;MAC3CD,KAAK,CAAChB,MAAM,GAAG,OAAO;MACtBgB,KAAK,CAACV,KAAK,GAAGW,MAAM,CAACC,OAAO;IAClC,CAAC,CAAC;EAEd;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACN,CAAC,CAAC;AAEF,MAAM;EAAEO,OAAO;EAAEC;AAAQ,CAAC,GAAGd,UAAU;AACvC,eAAec,OAAO;AACtB,OAAO,MAAM;EAAEX;AAAiB,CAAC,GAAGU,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}